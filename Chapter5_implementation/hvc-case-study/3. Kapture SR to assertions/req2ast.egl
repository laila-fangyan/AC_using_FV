[%
//source = Kapture_HVC_3SR.xml
//var gps = t_reqGroups.all.first().children.first();
//var rq = gps.children.first().children.selectOne(l|l.tagName="records").children.selectOne(s|s.e_backwardsTr.text="SR1_1_1");
// output: REQ-184.00

//rq.a_id.println();
// output: HL_SR_01
//var spec: String;
var event_1: String;
var event_2 : String;
var event_3 : String;

//for spec1A, Spec1B, we need 2 events (AND) for guard condition, so event_4 is used for the 1st event. Thus codes for event123 stay untouch
var event_4 : String;
//spec=req.e_backwardsTr.text;
//spec.println();


//Step 2: identify the requirement template type.
//identify the template of the requrirement
var tmp = req.e_data.e_template;
//output: while
//tmp.a_name.println();

if(tmp.a_name="while")
{

//2 instBlock are selected: choiceT4, chioceT2
//instBlock with no slot members is filtered out by s.e_item.children.size()>0
//instblk is a set
var instblk = tmp.c_instBlock.select(s|(s.a_isUsed="true" and s.e_item.children.size()>0));

//for event 1
//get slot
var slotT4 =instblk.selectOne(s|s.e_item.children.second().a_slotId= "slotT4").e_item.children.second();

//get element of slot: signal-ref
event_1=slotT4.children.second().text;
//"333".println();
event_1.println();
//event_1=event_1.getBufferedName();

if (slotT4.children.size()=5)
{event_4 = slotT4.children.last().text;
"444".println();
event_4.println();
"555".println();
}
//for event 2
//get slot
var slotT3 =instblk.selectOne(s|s.e_item.children.second().a_slotId= "slotT3").e_item.children.second();

//get element of slot: signal-ref
event_2=slotT3.children.second().text;
"222333".println();
("event_2: " + event_2).println();


event_3 = event_2.substring(0, event_2.indexOf("out")+3);
("event_3: " + event_3).println();

event_2.getBufferedName();
("event_2.getBufferedName(): "+event_2.getBufferedName()).println();
%]


[%if (event_4.isDefined())
{
if (event_2.startsWith("buffered"))
{%]
untimed csp [%=sr_index%] csp-begin

channel [%=event_2.getBufferedName()%] : core_real
channel read : core_real

BufferedOutput = (Buffer [| {|read|} |] Output) \{|read|}

-- Output simply outputs what it reads.
Output = read?x__ -> [%=event_2.cutBufferedPrefix().cutSuffix()%].out!x__ -> Output

-- A buffer, whose current 'value' can be overwritten.
Buffer = [%=event_2.getBufferedName()%]?x__ -> (read!x__ -> Buffer [] Buffer)

[%=sr_index%] = (Behaviour [| {| [%=event_2.getBufferedName()%] |} |] BufferedOutput) \ {|[%=event_2.getBufferedName()%]|}

Behaviour = CHAOS(Events) 
		[| {|[%=event_1.cutBufferedPrefix()%]|} |> 
		(ClosedLoop_ctrl /\  Behaviour)
[%if (event_2.endsWith("x__"))
{%]
ClosedLoop_ctrl = [%=event_4.cutBufferedPrefix()%] -> [%=event_2.getBufferedName()%][%=event_2.substring(event_2.indexOf("out")+3)%] -> ClosedLoop_ctrl
[%}else {%]
ClosedLoop_ctrl = [%=event_4.cutBufferedPrefix()%] -> [%=event_2.getBufferedName()%][%=event_2.substring(event_2.indexOf("out")+3)%] -> ClosedLoop_ctrl
[%}%]
csp-end

untimed csp [%=sr_index%]_implement associated to [%= getModuleName()%] csp-begin 
[%=sr_index%]_implement = [%=getModuleName()%]::O__(0) |\ {|[%=event_1.cutBufferedPrefix()%],[%=event_3.cutBufferedPrefix()%],[%=event_4.cutBufferedPrefix()%]|}				
csp-end
[%}
else{
//not start with buffered
%]

untimed csp [%=sr_index%] csp-begin
[%=sr_index%] = CHAOS(Events) [| {|[%=event_1.cutBufferedPrefix()%]|} |> (RUN({|[%=event_4.cutBufferedPrefix()%]|}) /\ [%=event_2.cutBufferedPrefix()%] -> [%=sr_index%])
csp-end

untimed csp [%=sr_index%]_implement associated to [%= getModuleName()%] csp-begin 
[%=sr_index%]_implement = [%=getModuleName()%]::O__(0) |\ {|[%=event_1.cutBufferedPrefix()%],[%=event_3.cutBufferedPrefix()%],[%=event_4.cutBufferedPrefix()%]|}				
csp-end


[%}

} else{
//else event_4 is not defined, currently only address spec 3
//buffered or not is not considered
%]

untimed csp [%=sr_index%] csp-begin
[%=sr_index%] = CHAOS(Events) [| {|[%=event_1%]|} |> (RUN({|[%=event_1%]|}) /\ [%=event_2%] -> [%=sr_index%])
csp-end

untimed csp [%=sr_index%]_implement associated to [%= getModuleName()%] csp-begin 
[%=sr_index%]_implement = [%=getModuleName()%]::O__(0) |\ {|[%=event_1%],[%=event_3%]|}				
csp-end

[%}%]

untimed assertion A_[%=sr_index%] : [%=sr_index%]_implement refines [%=sr_index%]  in the traces model
[%}%]


[%
operation String getBufferedName() :String{

var buffered_event : String;

if (self.startsWith("buffered"))
{
buffered_event= "buffered_"+self.substring(getModuleName().length()+("buffered_"+"::").length(), self.indexOf("."));
("buffered_event: "+ buffered_event).println();
return buffered_event;
}
//else {return self;}

}
%]
[*
This operation is to get the module name by taking the first element before the first ::
[%
operation String getModuleName() : String {
var moduleName : String;
moduleName = self.substring(0, self.indexOf("::"));
return moduleName;
}%]
*]

[*This operation is to get the module name by querying RoboChart models*]
[%
operation getModuleName() : String {
var moduleName : String;
for (md in X!RCModule.allInstances())
{moduleName = md.name;}
return moduleName;
}

operation String cutBufferedPrefix(): String{
if(self.startsWith("buffered_"))
{
return self.substring(("buffered_").length());}
else {return self;}
}

//to get only the core name of the event, e.g. mod_sys::int_ActualHV.out!x__ shall be changed to 
//mod_sys::int_ActualHV
//this core shall be used in different way as needed
operation String cutSuffix(): String{
return self.substring(0, self.indexOf("."));
}
%]


