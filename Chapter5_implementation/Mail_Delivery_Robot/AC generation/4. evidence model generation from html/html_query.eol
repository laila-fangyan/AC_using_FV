//2021.7.5 model query of html report to create AC model of evidence 

//this version assume that there is either timed or untimed assertions,
//not possible to have both in the .asseritons
//but can be extended to cover both

//also assume that there is only one assertion 
//but can be extended to cover multiple

//source M= spec3_assertions.html
//source X= HVC_Req_buffered.xml
//source AC=SACM_AC.model

//print 1. value can be 1 or 2
M!t_table.all.size.println();

//print 2, always 2, 1 for untimed, 1 for timed
M!t_h2.all.size.println();

//find the index of safety requirement from title in html

var ast_title : String;
var sr_index : String;
ast_title= M!t_title.all.first.text;
ast_title.println();
//("isFDR? " + "FDR".isSubstringOf(ast_title)).println();
//("isPRISM? " + "PRISM".isSubstringOf(ast_title)).println();

sr_index=ast_title.substring(ast_title.indexOf("assertions in")+("assertions in ").length(), ast_title.indexOf(".assertions"));
("sr_index: " +sr_index).println();



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//in Kapture xml, find requirement which trace back to sr in hazardlog
//through value of sr_index
var req= X!t_record.all.selectOne(l|l.e_backwardsTr.text=sr_index);
if(req.isDefined())
{"defined".println();}
else {"notdefined".println();}
("req.tagName: "+ req.tagName).println();
("req.a_id: " + req.a_id).println();

//obtain verification ID through forwardsTr
var v_claim_name: String;
v_claim_name=req.e_forwardsTr.text;
("v_claim_name:" +v_claim_name).println();
("v_claim_name length:" +v_claim_name.length()).println();

var resultPrism : Boolean;
var resultFDR : String; 

if ("PRISM".isSubstringOf(ast_title))
{

var resultColumnIndex;
var i: Integer =0;
var j: Integer =1;
var nbOfRow: Integer;
nbOfRow= M!t_table.all.first().children.size();
("nbOfRow: "+nbOfRow).println();
var nbOfColumn: Integer;
nbOfColumn= M!t_table.all.first().children.first().children.size();
("nbOfColumn: "+nbOfColumn).println();
/*
oldresult=M!t_table.all.first().children.second().children.fourth().text;

("oldresult: "+oldresult).println();
("oldresult_1: "+ M!t_table.all.first().children.second().children.at(1).text).println();
("oldresult_2: "+ M!t_table.all.first().children.second().children.at(2).text).println();
("oldresult_3: "+ M!t_table.all.first().children.second().children.at(3).text).println();
("oldresult_4: "+ M!t_table.all.first().children.second().children.at(4).text).println();
'abcdefghijklmnopqrstuvwxyz'.indexOf('def').println();

*/

while (i<nbOfColumn)
{if (M!t_table.all.first().children.first().children.at(i).text="result:")
 {
 resultColumnIndex=i;
 }
 i=i+1;
}
("resultColumnIndex: "+resultColumnIndex).println();

while(j<nbOfRow)
{
resultPrism= true and M!t_table.all.first().children.at(j).children.at(resultColumnIndex).text.asBoolean();
j=j+1;

}
("prism result: "+ resultPrism).println();



}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//find the FDR result from the 4th colomn of table in html

else if ("FDR".isSubstringOf(ast_title))

{

resultFDR=M!t_table.all.first().children.second().children.fourth().text;
("fdr result: "+resultFDR).println();

}




///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//create evidence model(AritifactReference)
var evidence= new AC!ArtifactReference;
var name = new AC!LangString;
evidence.name = name;


if ("PRISM".isSubstringOf(ast_title))
{evidence.name.content = "PRISM checking result for " + v_claim_name + " is \"" + resultPrism + "\"";
}
else if ("FDR".isSubstringOf(ast_title))
{ 
evidence.name.content = "FDR checking result for " + v_claim_name + " is \"" + resultFDR + "\"";
}



/*
("111 "+ AC!AssertedEvidence.allInstances()).println();
("222 "+ AC!AssertedEvidence.allInstances().first()).println();
("333 "+ AC!AssertedEvidence.allInstances().first().target.first().name.content).println();
("444 "+ AC!AssertedEvidence.allInstances().first().target.first().name.content.length()).println();
(AC!AssertedEvidence.allInstances().first().target.first().name.content = "Claim for "+v_claim_name).println();
if (AC!AssertedEvidence.allInstances().first().target.first().name.content = "Claim for "+v_claim_name)
{"match".println();}
*/
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//in AC models, search assertedevidence relationship whose target is v_claim_name(get from kapture xml throught sr_index)
//then delete its source relationship
//add the newly created evidence (generated from html) to the relationship as source
for (ae in AC!AssertedEvidence.allInstances().select(ae|ae.target.first().name.content="Claim for "+v_claim_name))
{
var old_evidence : String;
old_evidence=ae.source.first().name.content;
("old_evidence: " + old_evidence).println();



for(ev in AC!ArtifactReference.allInstances().select(e|e.name.content=old_evidence))
{
if(ae.target.first().name.content="Claim for "+v_claim_name and ae.source.first()=ev)
{
//delete source relationship
//this should be the 1st step
ae.source.clear();
//delete the old evidence
//this must be the second step
delete ev;
}
}
//this must be the 3rd step
ae.source.add(evidence);

("ae.source: "+ae.source.first().name.content).println();
}
/*
//print Assertion, States, Transitions,Result
for (t in t_th.all())
{t.text.println();
if (t.text = "result")
{}
}
*